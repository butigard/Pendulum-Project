


class dPendulum {
  PVector position1;
  PVector position2;
  PVector origin;
  float m1;
  float m2;
  float r1;
  float r2;
  float a1;
  float a2;
  float a1_v;
  float a2_v;
  float a1_a;
  float a2_a;
  float ballr;
  float damp;
  float gravity;
  Energy e;
  float ex;
  float ey;
 
  
  boolean dragging1 = false;
  boolean dragging2 = false;
  
  
  dPendulum(PVector origin_, float r_, float r2_, float m1_, float m2_, float gravity_) {
    origin = origin_;
    position1 = new PVector();
    position2 = new PVector();
    m1 = m1_;
    m2 = m2_;
    r1 = r_;
    r2 = r2_;
    ballr = 48.0;
    gravity = gravity_;
    
    a1 = PI/4;
    a2 = PI/4;
    a1_v = 0;
    a1_a = 0;
    a2_v = 0;
    a2_a = 0;
    damp = 0.995;
    
    ex = width/2 - 100;
    ey = 680;
    e = new Energy(new PVector(ex, ey));
    
    
  }
  
  void go() {
    update();
    drag();
    display();
  }
  
  void update() {
    if(!dragging1 && !dragging2) {
      a1_a = (-1 * gravity * (2 * (m1 + m2)) * sin(a1) - m2 * gravity * sin(a1 - (2 * a2)) - 2 * sin(a1 - a2) * m2 * (pow(a2_v,2) * r2 + pow(a1_v,2) * r1 * cos(a1 - a2))) / (r1 * (2 * m1 + m2 - m2 * cos(2 * a1 - 2 * a2)));
      a2_a = (2 * sin(a1 - a2) * (pow(a1_v,2) * r1 * (m1 + m2) + gravity * (m1 + m2) * cos(a1) + pow(a2_v,2) * r2 * m2 * cos(a1-a2))) / (r2 * (2 * m1 + m2 - m2 * cos(2 * a1 - 2 * a2)));
      a1_v += a1_a;
      a2_v += a2_a;
      a1 += a1_v;
      a2 += a2_v;
      
      e.update(a1_v, a2_v, position1.y, position2.y);
    }
  }
  
  void display() {
    position1.set(r1*sin(a1), r1*cos(a1), 0);
    position1.add(origin);
    position2.set(r2*sin(a2), r2*cos(a2), 0);
    position2.add(position1);
    stroke(0);
    strokeWeight(2);
    // Draw the arm
    line(origin.x, origin.y, position1.x, position1.y);
    line(position1.x, position1.y, position2.x, position2.y);
    ellipseMode(CENTER);
    fill(175);
    if (dragging1 || dragging2) fill(0);
    // Draw the ball
    ellipse(position1.x, position1.y, ballr, ballr);
    ellipse(position2.x, position2.y, ballr, ballr);
    
    e.display();
  }
  
  
  void clicked(int mx, int my) {
    float d1 = dist(mx, my, position1.x, position1.y);
    float d2 = dist(mx, my, position2.x, position2.y);
    if (d1 < ballr){
      dragging1 = true;
    }
    else if (d2 < ballr){
      dragging2 = true;
    }
  }

    void stopDragging() {
    if (dragging1 || dragging2) {
      a1_v = 0;
      a2_v = 0;
      dragging1 = false;
      dragging2 = false;
    }
  }
  
  void drag() {
    if (dragging1) {
      PVector diff = PVector.sub(origin, new PVector(mouseX, mouseY));
      a1 = atan2(-1 * diff.y, diff.x) - radians(90);
    }
    if (dragging2) {
      PVector diff = PVector.sub(position1, new PVector(mouseX, mouseY));
      a2 = atan2(-1 * diff.y, diff.x) - radians(90);
    }
  }
  
}
