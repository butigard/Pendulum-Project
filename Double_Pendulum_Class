


class dPendulum {
  PVector position1;
  PVector position2;
  PVector origin;
  float m1, m2;
  float r1, r2;
  float x1, y1, x2, y2;
  float a1, a2;
  float a1_v, a2_v;
  float a1_a, a2_a;
  float ballr;
  float damp;
  float gravity;
  float h;

  
  Energy e;
  // location of energy bars
  float ex;
  float ey;
 
  // used for path tracing
  float px2;
  float py2;
  
  // temporary a1_a & a2_a
  float ta1_a;
  float ta2_a;
  
  differential d;
  
  // Arrays
  float[] yin = new float[4];
  float[] yout = new float[4];
  
  // Time variables
  float t;
  float frm;
  
  // Dragging and pause button
  boolean dragging1 = false;
  boolean dragging2 = false;
  boolean pauseBl = false;
  int pauseIn = -1;
  float bx, by, br;
  
  
  
  dPendulum(PVector origin_, float r_, float r2_, float m1_, float m2_, float gravity_, float a1_, float a2_) {
    origin = origin_;
    position1 = new PVector();
    position2 = new PVector();
    m1 = m1_;
    m2 = m2_;
    r1 = r_;
    r2 = r2_;
    gravity = gravity_;
    
    a1 = a1_;
    a2 = a2_;
    a1_v = 0;
    a1_a = 0;
    a2_v = 0;
    a2_a = 0;
    damp = 0.595;
    
    h = (TMAX - TMIN) / (NSTEP - 1.0);
    frm = 0;
    
    
    ex = origin.x - r1 - r2 +50;
    ey = origin.y - r1 - r2 - 50;
    bx = ex - 25;
    by = ey;
    br = 25;
    e = new Energy(new PVector(ex, ey));
    d = new differential();
    
    
  }
  
  void go() {
    update();
    drag();
    display();
  }
  
  void update() {
    if(!dragging1 && !dragging2 && !pauseBl) {
      
        yin[0] = a1;
        yin[1] = a1_v;
        yin[2] = a2;
        yin[3] = a2_v;
        d.rungeKutta(t, yin, yout, h);
        a1 = yout[0];
        a1_v = yout[1];
        a2 = yout[2];
        a2_v = yout[3];
        
        //print(a1_v*r1, "\n");
        
        // calculate position
        x1 = r1*sin(a1);
        y1 = r1*cos(a1);
        x2 = r2*sin(a2);
        y2 = r2*cos(a2);
        
        // pendulum 1
        position1.set(x1, y1, 0);
        position1.add(origin);
        //pendulum 2
        position2.set(x2, y2, 0);
        position2.add(position1);
        
        frm += 1;
        t = TMIN + h*frm;
        
        e.update(a1_v, a2_v, position1.y, position2.y, a1, a2);
      
    }
    else {
      e.cmUpdate(position1.y, position2.y);
    }
  }
  
  void display() {
    print(a1/PI, "PI ------", a2/PI, "PI\n");
    
    stroke(0);
    strokeWeight(2);
  
    
    // Draw the arm
    line(origin.x, origin.y, position1.x, position1.y);
    line(position1.x, position1.y, position2.x, position2.y);
    ellipseMode(CENTER);
    fill(175);
    
    // Draw the pause button
    ellipse(bx, by, br, br);
    if (dragging1 || dragging2 || pauseBl) fill(0);
    
    // Draw the ball
    ellipse(position1.x, position1.y, m1, m1);
    ellipse(position2.x, position2.y, m2, m2);
    
    
    // Trace path
    canvas.beginDraw();
    canvas.strokeWeight(4);
    canvas.stroke(0);
    if (frameCount > 1) {
      canvas.line(px2, py2, position2.x, position2.y);
    }
    canvas.endDraw();
    
    px2 = position2.x;
    py2 = position2.y;
    
    e.display();
  }
  
  
  void clicked(int mx, int my) {
    float d1 = dist(mx, my, position1.x, position1.y);
    float d2 = dist(mx, my, position2.x, position2.y);
    float d3 = dist(mx, my, bx, by);
    if (d1 < m1){
      dragging1 = true;
    }
    else if (d2 < m2){
      dragging2 = true;
    }
    else if (d3 < br){
      pauseIn *= -1;
      if (pauseIn == 1){
        pauseBl = true;
        a1_v = 0;
        a2_v = 0;
      }
      else if (pauseIn == -1){
        pauseBl = false;
      }
    }
  }

    void stopDragging() {
    if (dragging1 || dragging2) {
      a1_v = 0;
      a2_v = 0;
      dragging1 = false;
      dragging2 = false;
    }
  }
  
  void drag() {
    if (dragging1) {
      PVector diff = PVector.sub(origin, new PVector(mouseX, mouseY));
      a1 = atan2(-1 * diff.y, diff.x) - radians(90);
      position1.set(r1*sin(a1), r1*cos(a1), 0);
      position1.add(origin);
      position2.set(r2*sin(a2), r2*cos(a2), 0);
      position2.add(position1);
    }
    if (dragging2) {
      PVector diff = PVector.sub(position1, new PVector(mouseX, mouseY));
      a2 = atan2(-1 * diff.y, diff.x) - radians(90);
      position2.set(r2*sin(a2), r2*cos(a2), 0);
      position2.add(position1);
    }
  }
  
}
