

class differential 
{ 
    void derivs(float xin, float yin[], float dydx[]) 
    { 
        dydx[0] = yin[1];
        dydx[1] = ((-1 * gravity * (2 * (m1 + m2)) * sin(yin[0]) - m2 * gravity * sin(yin[0] - (2 * yin[2])) - 2 * sin(yin[0] - yin[2]) * m2 * (pow(yin[3],2) * r2 + pow(yin[1],2) * r1 * cos(yin[0] - yin[2]))) / (r1 * (2 * m1 + m2 - m2 * cos(2 * yin[0] - 2 * yin[2]))));
        dydx[2] = yin[3];
        dydx[3] = (2 * sin(yin[0] - yin[2]) * (pow(yin[1],2) * r1 * (m1 + m2) + gravity * (m1 + m2) * cos(yin[0]) + pow(yin[3],2) * r2 * m2 * cos(yin[0]-yin[2]))) / (r2 * (2 * m1 + m2 - m2 * cos(2 * yin[0] - 2 * yin[2])));
        return;
    } 
      
    // Finds value of y for a given x using step size h 
    // and initial value y0 at x0. 
    void rungeKutta(float xin, float yin[], float yout[], float h) 
    { 
        differential d1 = new differential(); 
        
  
        int i;
        float hh, xh, dydx[], dydxt[], yt[], k1[], k2[], k3[], k4[];
        
        hh = 0.5*h;
        xh = xin + hh; 
        
        derivs(xin, yin, dydx); /* first step */
        for (i = 0; i < 3; i++) 
        {
          k1[i] = h*dydx[i];
          yt[i] = yin[i] + 0.5*k1[i];
        }
      
        derivs(xh, yt, dydxt); /* second step */ 
        for (i = 0; i < 3; i++)
        {
          k2[i] = h*dydxt[i];
          yt[i] = yin[i] + 0.5*k2[i];
        }   
      
        derivs(xh, yt, dydxt); /* third step */
        for (i = 0; i < 3; i++)
        {
          k3[i] = h*dydxt[i];
          yt[i] = yin[i] + k3[i];
        }
      
        derivs(xin + h, yt, dydxt); /* fourth step */
        for (i = 0; i < 3; i++)
        {
          k4[i] = h*dydxt[i];
          yout[i] = yin[i] + k1[i]/6. + k2[i]/3. + k3[i]/3. + k4[i]/6.;
        }
       
        return;
      
      }
      
} 
  
